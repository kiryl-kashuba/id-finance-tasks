type Query {
    findAllUserAccount : [UserAccountModel]
    findUserAccount(id : Long!) : UserAccountModel
}

type Mutation {
    createUserAccount(UserAccount : UserAccount) : Long
    updateUserAccount(userAccount : UserAccountUpdate) : Long
    deleteUserAccount(id : Long!) : Void
    insertUserAccount(UserAccount : UserAccountUpdate) : Long
}

type Void {
    d : String
}

enum CreditStatus {
    DRAFT
    PROCESSING
    ACTIVE
    PENDING
    CANCELLED
    EXPIRED
    COMPLETED
    RETURNED
    SOLD
}

enum Education {
    LOWER_SECONDARY
    SECONDARY
    INCOMPLETE_HIGHER
    HIGHER
    OTHER
}

enum MaritalStatus {
    UNMARRIED
    MARRIED
    WIDOWED
    DIVORCED
    CIVIL_MARRIAGE
}

input UserAccountUpdate {
    id : Long!
    email : String
    name : String
    mobilePhone : String
}

type UserAccountModel {
    id : Long
    dateCreated : LocalDateTime
    email : String
    name : String
    mobilePhone : String
}

input UserAccount {
    email : String!
    name : String!
    mobilePhone : String!
}

scalar Long
scalar LocalDateTime
scalar Date