/*
 * This file is generated by jOOQ.
 */
package com.mm.task06.db.tables;


import com.mm.task06.db.IdfOnboarding;
import com.mm.task06.db.Keys;
import com.mm.task06.db.tables.records.AudRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Aud extends TableImpl<AudRecord> {

    private static final long serialVersionUID = 1892773905;

    /**
     * The reference instance of <code>idf_onboarding.aud</code>
     */
    public static final Aud AUD = new Aud();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AudRecord> getRecordType() {
        return AudRecord.class;
    }

    /**
     * The column <code>idf_onboarding.aud.id</code>.
     */
    public final TableField<AudRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>idf_onboarding.aud.timestamp</code>.
     */
    public final TableField<AudRecord, Long> TIMESTAMP = createField(DSL.name("timestamp"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>idf_onboarding.aud.user_id</code>.
     */
    public final TableField<AudRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>idf_onboarding.aud</code> table reference
     */
    public Aud() {
        this(DSL.name("aud"), null);
    }

    /**
     * Create an aliased <code>idf_onboarding.aud</code> table reference
     */
    public Aud(String alias) {
        this(DSL.name(alias), AUD);
    }

    /**
     * Create an aliased <code>idf_onboarding.aud</code> table reference
     */
    public Aud(Name alias) {
        this(alias, AUD);
    }

    private Aud(Name alias, Table<AudRecord> aliased) {
        this(alias, aliased, null);
    }

    private Aud(Name alias, Table<AudRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Aud(Table<O> child, ForeignKey<O, AudRecord> key) {
        super(child, key, AUD);
    }

    @Override
    public Schema getSchema() {
        return IdfOnboarding.IDF_ONBOARDING;
    }

    @Override
    public UniqueKey<AudRecord> getPrimaryKey() {
        return Keys.KEY_AUD_PRIMARY;
    }

    @Override
    public List<UniqueKey<AudRecord>> getKeys() {
        return Arrays.<UniqueKey<AudRecord>>asList(Keys.KEY_AUD_PRIMARY);
    }

    @Override
    public Aud as(String alias) {
        return new Aud(DSL.name(alias), this);
    }

    @Override
    public Aud as(Name alias) {
        return new Aud(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Aud rename(String name) {
        return new Aud(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Aud rename(Name name) {
        return new Aud(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
