/*
 * This file is generated by jOOQ.
 */
package com.mm.task06.db.tables;


import com.mm.db.jooq.datatype.MaritalStatusConverter;
import com.mm.task06.db.IdfOnboarding;
import com.mm.task06.db.Keys;
import com.mm.task06.db.tables.records.PersonalDataRecord;
import com.mm.types.MaritalStatus;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PersonalData extends TableImpl<PersonalDataRecord> {

    private static final long serialVersionUID = 1548458223;

    /**
     * The reference instance of <code>idf_onboarding.personal_data</code>
     */
    public static final PersonalData PERSONAL_DATA = new PersonalData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PersonalDataRecord> getRecordType() {
        return PersonalDataRecord.class;
    }

    /**
     * The column <code>idf_onboarding.personal_data.id</code>.
     */
    public final TableField<PersonalDataRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>idf_onboarding.personal_data.birthday</code>.
     */
    public final TableField<PersonalDataRecord, Date> BIRTHDAY = createField(DSL.name("birthday"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>idf_onboarding.personal_data.first_name</code>.
     */
    public final TableField<PersonalDataRecord, String> FIRST_NAME = createField(DSL.name("first_name"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>idf_onboarding.personal_data.last_name</code>.
     */
    public final TableField<PersonalDataRecord, String> LAST_NAME = createField(DSL.name("last_name"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>idf_onboarding.personal_data.birthplace</code>.
     */
    public final TableField<PersonalDataRecord, String> BIRTHPLACE = createField(DSL.name("birthplace"), org.jooq.impl.SQLDataType.VARCHAR(150), this, "");

    /**
     * The column <code>idf_onboarding.personal_data.maritalStatus</code>.
     */
    public final TableField<PersonalDataRecord, MaritalStatus> MARITALSTATUS = createField(DSL.name("maritalStatus"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "", new MaritalStatusConverter());

    /**
     * Create a <code>idf_onboarding.personal_data</code> table reference
     */
    public PersonalData() {
        this(DSL.name("personal_data"), null);
    }

    /**
     * Create an aliased <code>idf_onboarding.personal_data</code> table reference
     */
    public PersonalData(String alias) {
        this(DSL.name(alias), PERSONAL_DATA);
    }

    /**
     * Create an aliased <code>idf_onboarding.personal_data</code> table reference
     */
    public PersonalData(Name alias) {
        this(alias, PERSONAL_DATA);
    }

    private PersonalData(Name alias, Table<PersonalDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private PersonalData(Name alias, Table<PersonalDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> PersonalData(Table<O> child, ForeignKey<O, PersonalDataRecord> key) {
        super(child, key, PERSONAL_DATA);
    }

    @Override
    public Schema getSchema() {
        return IdfOnboarding.IDF_ONBOARDING;
    }

    @Override
    public Identity<PersonalDataRecord, Long> getIdentity() {
        return Keys.IDENTITY_PERSONAL_DATA;
    }

    @Override
    public UniqueKey<PersonalDataRecord> getPrimaryKey() {
        return Keys.KEY_PERSONAL_DATA_PRIMARY;
    }

    @Override
    public List<UniqueKey<PersonalDataRecord>> getKeys() {
        return Arrays.<UniqueKey<PersonalDataRecord>>asList(Keys.KEY_PERSONAL_DATA_PRIMARY);
    }

    @Override
    public PersonalData as(String alias) {
        return new PersonalData(DSL.name(alias), this);
    }

    @Override
    public PersonalData as(Name alias) {
        return new PersonalData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PersonalData rename(String name) {
        return new PersonalData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PersonalData rename(Name name) {
        return new PersonalData(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Date, String, String, String, MaritalStatus> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
